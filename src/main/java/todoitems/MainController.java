package todoitems;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.text.SimpleDateFormat;
import java.util.Date;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/todoitems") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called todoListRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TodoItemsRepository todoItemsRepository;
    private String currentDate;
    private SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

    @GetMapping() // Map ONLY GET Requests
    public @ResponseBody ResponseEntity getAllTodoItems() {
        // This returns a JSON or XML with the users
        return ResponseEntity.ok(todoItemsRepository.findAll());

    }

    @PostMapping() // Map ONLY POST Requests
    public @ResponseBody ResponseEntity addNewTodoItem (@RequestParam String itemname) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        if (itemname.length()>140)
            return ResponseEntity.status(400).body("invalid parameter");
        TodoItem todoItem = new TodoItem();
        todoItem.setItemName(itemname);
        todoItem.setDone(false);
        currentDate = formatter.format(new Date());
        todoItem.setTimestamp(currentDate);

        todoItemsRepository.save(todoItem);
        return ResponseEntity.status(200).body("add new todo item");

    }

    @PutMapping(path="/{id}") // Map ONLY PUT Requests
    public @ResponseBody ResponseEntity updateTodoItem (@PathVariable("id") Integer id, @RequestParam String itemname
            , @RequestParam Boolean done) {

        //TodoItem todoItem = todoItemsRepository.findByItemName(itemname);

        if (!todoItemsRepository.exists(id))
            return ResponseEntity.status(404).body("can not find a todo item according to the id given");
        if (itemname.length()>140 || !(done instanceof Boolean))
            return ResponseEntity.status(400).body("invalid parameter");
        TodoItem todoItem = todoItemsRepository.findOne(id);
        todoItem.setItemName(itemname);
        todoItem.setDone(done);
        currentDate = formatter.format(new Date());
        todoItem.setTimestamp(currentDate);
        todoItemsRepository.save(todoItem);
        return ResponseEntity.status(200).body("todo item updated");
    }

    @DeleteMapping(path="/{id}") // Map ONLY DELETE Requests
    public @ResponseBody ResponseEntity deleteTodoItem (@PathVariable("id") Integer id) {
        TodoItem todoItem = todoItemsRepository.findOne(id);
        todoItemsRepository.delete(id);
        //return "The todo item has been deleted";
        //ResponseMessage responseMessage = new ResponseMessage(204, "todo item deleted", todoItem);
        return ResponseEntity.status(204).body("todo item deleted");
    }
}