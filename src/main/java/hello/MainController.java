package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import hello.TodoItem;
import hello.TodoItemsRepository;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/todoitems") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called todoListRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TodoItemsRepository todoItemsRepository;
    private String currentDate;
    private SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

    @GetMapping(path="/")
    public @ResponseBody Iterable<TodoItem> getAllTodoItems() {
        // This returns a JSON or XML with the users
        return todoItemsRepository.findAll();
    }

    @PostMapping(path="/") // Map ONLY POST Requests
    public @ResponseBody String addNewTodoItem (@RequestParam String itemname) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        TodoItem todoItem = new TodoItem();
        todoItem.setItemName(itemname);
        todoItem.setDone(false);
        currentDate = formatter.format(new Date());
        todoItem.setTimestamp(currentDate);

        todoItemsRepository.save(todoItem);
        return "New todo item has been submitted";
    }

    @PutMapping(path="/{id}") // Map ONLY PUT Requests
    public @ResponseBody String updateTodoItem (@PathVariable("id") long id, @RequestParam String itemname
            , @RequestParam boolean done) {

        TodoItem todoItem = todoItemsRepository.findOne(id);
        todoItem.setItemName(itemname);
        todoItem.setDone(done);
        todoItemsRepository.save(todoItem);
        return "The todo item has been updated";
    }

    @DeleteMapping(path="/{id}") // Map ONLY DELETE Requests
    public @ResponseBody String deleteTodoItem (@PathVariable("id") Long id) {
        todoItemsRepository.delete(id);
        return "The todo item has been deleted";
    }
}